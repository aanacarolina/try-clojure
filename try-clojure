user =>(+ 1 2)
3
user =>(print "Hello")
Hello
nil
user =>start
#object[Function]
user =>(start)
"Tutorial started!"
user =>"Hello World"
"Hello World"
user =>(list 1 2 3)
(1 2 3)
user =>(' 1 2 3)
Cannot call 1 as a function.
user =>(- 10 20)
-10
user =>(my-name "Carol")
{:user-name "Carol"}
user =>:next
:next
user =>(create-dog :name "Zeus" :breed "Beagle")
user =>(set-prompt :color "purple" :text "user =>")
{:user-name "Carol", :tutorial true, :step 5, :prompt-text "user =>", :prompt-color "text-purple-400"}
user =>(reverse "a-long-string")
("g" "n" "i" "r" "t" "s" "-" "g" "n" "o" "l" "-" "a")
user =>["luna" "milu" "boris"]
["luna" "milu" "boris"]
user =>(def foo "boteco")
#'user/foo
user =>(let [a 2 b 3] (* a b))
6
user =>{:country "Brasil"}
{:country "Brasil"}
user =>(first '("alpha" "bravo" "charlie"))
"alpha"
user =>(doc range)
-------------------------
clojure.core/range
([] [end] [start end] [start end step])
Returns a lazy seq of nums from start (inclusive) to end (exclusive), by step, where start defaults to 0, step to 1, and end to infinity.
nil
user =>(range 6)
(0 1 2 3 4 5)
user =>(range 100)
(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ...)
user =>(filter odd? (range 50))
(1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 ...)
user =>(map (fn [n] (+ n (* n 10))) (range 1 10))
(11 22 33 44 55 66 77 88 99)
user =>(fn [l b] (* (+ l b) 2))
#object[Function]
user =>(more)
true